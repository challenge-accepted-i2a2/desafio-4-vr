
from crewai import Crew, Process
from agents import VRAgents
from tasks import VRTasks
import os
import pandas as pd
from dotenv import load_dotenv

load_dotenv()

# Ensure the data directory exists
data_dir = './data'
if not os.path.exists(data_dir):
    os.makedirs(data_dir)

# Initialize agents and tasks
vra_agents = VRAgents()
vr_tasks = VRTasks(data_dir=data_dir)

# Define agents
data_loader_agent = vra_agents.data_loader_agent()
consistency_agent = vra_agents.consistency_agent()
data_consolidation_agent = vra_agents.data_consolidation_agent()
exclusion_agent = vra_agents.exclusion_agent()
validation_agent = vra_agents.validation_agent()
calculation_agent = vra_agents.calculation_agent()
report_agent = vra_agents.report_agent()

# Define tasks
load_data_task = vr_tasks.load_data_task(data_loader_agent)

# To pass data between tasks, we need to use the output of the previous task as context for the next.
# CrewAI handles this automatically if tasks are chained correctly.
# However, for more explicit control and to ensure data is available for subsequent tasks,
# we can load the output files generated by previous tasks.

# Placeholder for loaded data (will be populated after load_data_task completes)
all_data = None

# Placeholder for consolidated data
consolidated_data = None

# Placeholder for excluded data
excluded_data = None

# Placeholder for validated data
validated_data = None

# Placeholder for calculated VR data
calculated_vr_data = None

# Main execution flow
if __name__ == "__main__":
    # Execute load_data_task first to get all_data
    crew = Crew(
        agents=[data_loader_agent
                ],
        tasks=[load_data_task
               ],
        process=Process.sequential,
        verbose=True
    )
    result_load_data = crew.kickoff()
    print("\n\n----------------------------------------")
    print("Load Data Task Result:")
    print(result_load_data)
    print("----------------------------------------\n\n")

    # Load the data from the output file of the first task
    try:
        all_data = pd.read_pickle(load_data_task.output_file)
    except Exception as e:
        print(f"Error loading all_data from pickle: {e}")
        exit()

    # Define and execute consistency_check_task
    consistency_check_task = vr_tasks.consistency_check_task(consistency_agent, all_data)
    crew = Crew(
        agents=[consistency_agent],
        tasks=[consistency_check_task],
        process=Process.sequential,
        verbose=True
    )
    result_consistency_check = crew.kickoff()
    print("\n\n----------------------------------------")
    print("Consistency Check Task Result:")
    print(result_consistency_check)
    print("----------------------------------------\n\n")

    try:
        all_data = pd.read_pickle(consistency_check_task.output_file)
    except Exception as e:
        print(f"Error loading cleaned_data from pickle: {e}")
        exit()

    # Define and execute consolidate_data_task
    consolidate_data_task = vr_tasks.consolidate_data_task(data_consolidation_agent, all_data)
    crew = Crew(
        agents=[data_consolidation_agent],
        tasks=[consolidate_data_task],
        process=Process.sequential,
        verbose=True
    )
    result_consolidate_data = crew.kickoff()
    print("\n\n----------------------------------------")
    print("Consolidate Data Task Result:")
    print(result_consolidate_data)
    print("----------------------------------------\n\n")

    try:
        consolidated_data = pd.read_pickle(consolidate_data_task.output_file)
    except Exception as e:
        print(f"Error loading consolidated_data from pickle: {e}")
        exit()

    # Define and execute apply_exclusion_task
    apply_exclusion_task = vr_tasks.apply_exclusion_task(exclusion_agent, consolidated_data, all_data)
    crew = Crew(
        agents=[exclusion_agent],
        tasks=[apply_exclusion_task],
        process=Process.sequential,
        verbose=True
    )
    result_apply_exclusion = crew.kickoff()
    print("\n\n----------------------------------------")
    print("Apply Exclusion Task Result:")
    print(result_apply_exclusion)
    print("----------------------------------------\n\n")

    try:
        excluded_data = pd.read_pickle(apply_exclusion_task.output_file)
    except Exception as e:
        print(f"Error loading excluded_data from pickle: {e}")
        exit()

    # Define and execute validate_data_task
    validate_data_task = vr_tasks.validate_data_task(validation_agent, excluded_data, all_data)
    crew = Crew(
        agents=[validation_agent],
        tasks=[validate_data_task],
        process=Process.sequential,
        verbose=True
    )
    result_validate_data = crew.kickoff()
    print("\n\n----------------------------------------")
    print("Validate Data Task Result:")
    print(result_validate_data)
    print("----------------------------------------\n\n")

    try:
        validated_data = pd.read_pickle(validate_data_task.output_file)
    except Exception as e:
        print(f"Error loading validated_data from pickle: {e}")
        exit()

    # Define and execute calculate_vr_task
    calculate_vr_task = vr_tasks.calculate_vr_task(calculation_agent, validated_data, all_data)
    crew = Crew(
        agents=[calculation_agent],
        tasks=[calculate_vr_task],
        process=Process.sequential,
        verbose=True
    )
    result_calculate_vr = crew.kickoff()
    print("\n\n----------------------------------------")
    print("Calculate VR Task Result:")
    print(result_calculate_vr)
    print("----------------------------------------\n\n")

    try:
        calculated_vr_data = pd.read_pickle(calculate_vr_task.output_file)
    except Exception as e:
        print(f"Error loading calculated_vr_data from pickle: {e}")
        exit()

    # Define and execute generate_report_task
    output_report_path = os.path.join(data_dir, "VR_Report.xlsx")
    generate_report_task = vr_tasks.generate_report_task(report_agent, calculated_vr_data, output_report_path)
    crew = Crew(
        agents=[report_agent],
        tasks=[generate_report_task],
        process=Process.sequential,
        verbose=True
    )
    result_generate_report = crew.kickoff()
    print("\n\n----------------------------------------")
    print("Generate Report Task Result:")
    print(result_generate_report)
    print("----------------------------------------\n\n")

    print(f"VR Automation process completed. Final report saved to {output_report_path}")


